// Code generated by MockGen. DO NOT EDIT.
// Source: metrics.go

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	metrics "github.com/swfrench/nginx-log-exporter/internal/metrics"
	reflect "reflect"
	time "time"
)

// MockCounterT is a mock of CounterT interface
type MockCounterT struct {
	ctrl     *gomock.Controller
	recorder *MockCounterTMockRecorder
}

// MockCounterTMockRecorder is the mock recorder for MockCounterT
type MockCounterTMockRecorder struct {
	mock *MockCounterT
}

// NewMockCounterT creates a new mock instance
func NewMockCounterT(ctrl *gomock.Controller) *MockCounterT {
	mock := &MockCounterT{ctrl: ctrl}
	mock.recorder = &MockCounterTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCounterT) EXPECT() *MockCounterTMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockCounterT) Add(labels map[string]string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", labels, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockCounterTMockRecorder) Add(labels, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCounterT)(nil).Add), labels, value)
}

// Metric mocks base method
func (m *MockCounterT) Metric() *prometheus.CounterVec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metric")
	ret0, _ := ret[0].(*prometheus.CounterVec)
	return ret0
}

// Metric indicates an expected call of Metric
func (mr *MockCounterTMockRecorder) Metric() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metric", reflect.TypeOf((*MockCounterT)(nil).Metric))
}

// CreationTime mocks base method
func (m *MockCounterT) CreationTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreationTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreationTime indicates an expected call of CreationTime
func (mr *MockCounterTMockRecorder) CreationTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreationTime", reflect.TypeOf((*MockCounterT)(nil).CreationTime))
}

// MockHistogramT is a mock of HistogramT interface
type MockHistogramT struct {
	ctrl     *gomock.Controller
	recorder *MockHistogramTMockRecorder
}

// MockHistogramTMockRecorder is the mock recorder for MockHistogramT
type MockHistogramTMockRecorder struct {
	mock *MockHistogramT
}

// NewMockHistogramT creates a new mock instance
func NewMockHistogramT(ctrl *gomock.Controller) *MockHistogramT {
	mock := &MockHistogramT{ctrl: ctrl}
	mock.recorder = &MockHistogramTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHistogramT) EXPECT() *MockHistogramTMockRecorder {
	return m.recorder
}

// Observe mocks base method
func (m *MockHistogramT) Observe(labels map[string]string, values []float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Observe", labels, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Observe indicates an expected call of Observe
func (mr *MockHistogramTMockRecorder) Observe(labels, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*MockHistogramT)(nil).Observe), labels, values)
}

// Metric mocks base method
func (m *MockHistogramT) Metric() prometheus.ObserverVec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metric")
	ret0, _ := ret[0].(prometheus.ObserverVec)
	return ret0
}

// Metric indicates an expected call of Metric
func (mr *MockHistogramTMockRecorder) Metric() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metric", reflect.TypeOf((*MockHistogramT)(nil).Metric))
}

// CreationTime mocks base method
func (m *MockHistogramT) CreationTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreationTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreationTime indicates an expected call of CreationTime
func (mr *MockHistogramTMockRecorder) CreationTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreationTime", reflect.TypeOf((*MockHistogramT)(nil).CreationTime))
}

// MockManagerT is a mock of ManagerT interface
type MockManagerT struct {
	ctrl     *gomock.Controller
	recorder *MockManagerTMockRecorder
}

// MockManagerTMockRecorder is the mock recorder for MockManagerT
type MockManagerTMockRecorder struct {
	mock *MockManagerT
}

// NewMockManagerT creates a new mock instance
func NewMockManagerT(ctrl *gomock.Controller) *MockManagerT {
	mock := &MockManagerT{ctrl: ctrl}
	mock.recorder = &MockManagerTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagerT) EXPECT() *MockManagerTMockRecorder {
	return m.recorder
}

// AddCounter mocks base method
func (m *MockManagerT) AddCounter(name, help string, labelNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCounter", name, help, labelNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCounter indicates an expected call of AddCounter
func (mr *MockManagerTMockRecorder) AddCounter(name, help, labelNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCounter", reflect.TypeOf((*MockManagerT)(nil).AddCounter), name, help, labelNames)
}

// AddHistogram mocks base method
func (m *MockManagerT) AddHistogram(name, help string, labelNames []string, buckets []float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHistogram", name, help, labelNames, buckets)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHistogram indicates an expected call of AddHistogram
func (mr *MockManagerTMockRecorder) AddHistogram(name, help, labelNames, buckets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHistogram", reflect.TypeOf((*MockManagerT)(nil).AddHistogram), name, help, labelNames, buckets)
}

// GetCounter mocks base method
func (m *MockManagerT) GetCounter(name string) (metrics.CounterT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(metrics.CounterT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter
func (mr *MockManagerTMockRecorder) GetCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockManagerT)(nil).GetCounter), name)
}

// GetHistogram mocks base method
func (m *MockManagerT) GetHistogram(name string) (metrics.HistogramT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistogram", name)
	ret0, _ := ret[0].(metrics.HistogramT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistogram indicates an expected call of GetHistogram
func (mr *MockManagerTMockRecorder) GetHistogram(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistogram", reflect.TypeOf((*MockManagerT)(nil).GetHistogram), name)
}
